name: Build and Push to GitHub Container Registry

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Создание Имен Образов для Docker Hub And GitHub Container Registry
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

          DOCKER_USER="triksdev"

          IMAGE_NAME_GHCR="ghcr.io/$REPO_OWNER/$REPO_NAME"
          IMAGE_NAME_DOCKER="docker.io/$DOCKER_USER/$REPO_NAME"

          VERSION=${GITHUB_REF_NAME}

          echo "IMAGE_NAME_GHCR=${IMAGE_NAME_GHCR}:${VERSION}" >> $GITHUB_ENV
          echo "IMAGE_NAME_DOCKER=${IMAGE_NAME_DOCKER}:${VERSION}" >> $GITHUB_ENV

      - name: Build image
        uses: docker/build-push-action@v6
        env:
          IMAGE_NAME_GHCR: ${{ env.IMAGE_NAME_GHCR }}
          IMAGE_NAME_DOCKER: ${{ env.IMAGE_NAME_DOCKER }}
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME_GHCR }},${{ env.IMAGE_NAME_DOCKER }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push to GitHub
        run: docker push ${{ env.IMAGE_NAME_GHCR }}

      - name: Push to DockerHub
        run: docker push ${{ env.IMAGE_NAME_DOCKER }}



